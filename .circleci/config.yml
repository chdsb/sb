version: 2.1

orbs:
  sbt:
    description: SBT build/test runtime
    executors:
      default:
        docker:
          - image: s22s/miniconda-gdal:latest
        working_directory: ~/repo
        environment:
          SBT_VERSION: 1.3.8
          SBT_OPTS: -Xmx768m
    commands:
      setup:
        description: Setup for sbt build
        steps:
          - run:
              name: Setup sbt
              command: 'true' # NOOP

      compile:
        description: Do just the compilation stage to minimize sbt memory footprint
        steps:
          - run:
              name: "Compile Scala via sbt"
              command: |-
                sbt -v -batch compile test:compile it:compile

  python:
    commands:
      setup:
        description: Ensure a minimal python environment is avalable and ready
        steps:
          - run:
              name: Install Python and PIP
              command: |-
                python -m pip install --user 'setuptools>=45.2'

      requirements:
        description: Install packages identified in requirements file
        steps:
          - run:
              name: Install requirements
              command: /opt/conda/bin/conda install -c conda-forge --yes --file pyrasterframes/src/main/python/requirements-condaforge.txt


  rasterframes:
    commands:
      setup:
        steps:
          - run:
              name: Enable saving core files
              command: ulimit -c unlimited -S

      save-artifacts:
        steps:
          - run:
              command: |
                mkdir -p /tmp/core_dumps
                ls -lh /tmp
                cp core.* *.hs /tmp/core_dumps 2> /dev/null || true
                cp -r /tmp/hsperfdata* /tmp/*.hprof /tmp/core_dumps 2> /dev/null || true
              when: on_fail

          - store_artifacts:
              path: /tmp/core_dumps

          - store_test_results:
              path: core/target/test-reports

          - store_test_results:
              path: datasource/target/test-reports

          - store_test_results:
              path: experimental/target/test-reports

      save-doc-artifacts:
        steps:
          - run:
              command: |
                mkdir -p /tmp/core_dumps
                cp core.* *.hs /tmp/core_dumps 2> /dev/null || true
                mkdir -p /tmp/markdown
                cp /home/circleci/repo/pyrasterframes/target/python/docs/*.md /tmp/markdown 2> /dev/null || true
              when: on_fail

          - store_artifacts:
              path: /tmp/core_dumps

          - store_artifacts:
              path: /tmp/markdown

          - store_artifacts:
              path: docs/target/site
              destination: rf-site

      save-cache:
        steps:
          - save_cache:
              key: v4-dependencies--{{ checksum "build.sbt" }}
              paths:
                - ~/.ivy2/cache
                - ~/.sbt
                - ~/.cache/coursier
                - ~/.local

      restore-cache:
        steps:
          - restore_cache:
              keys:
                - v4-dependencies-{{ checksum "build.sbt" }}

jobs:
  test:
    executor: sbt/default
    steps:
      - checkout
      - sbt/setup
      - python/setup
      - python/requirements
      - rasterframes/setup
      - rasterframes/restore-cache
      - sbt/compile

      - run:
          name: "Scala Tests: core"
          command: sbt -batch core/test

      - run:
          name: "Scala Tests: datasource"
          command: sbt -batch datasource/test

      - run:
          name: "Scala Tests: experimental"
          command: sbt -batch experimental/test

      - run:
          name: "Create PyRasterFrames package"
          command: |-
            sbt -v -batch pyrasterframes/package

      - run:
          name: "Python Tests"
          command: sbt -batch pyrasterframes/test

      - rasterframes/save-artifacts
      - rasterframes/save-cache

  docs:
    executor: sbt/default
    steps:
      - checkout
      - sbt/setup
      - python/setup
      - python/requirements
      - rasterframes/setup
      - rasterframes/restore-cache
      - sbt/compile

      - run:
          name: Build documentation
          command: sbt makeSite
          no_output_timeout: 30m

      - rasterframes/save-doc-artifacts
      - rasterframes/save-cache

  it:
    executor: sbt/default
    steps:
      - checkout
      - sbt/setup
      - rasterframes/setup
      - rasterframes/restore-cache
      - sbt/compile

      - run:
          name: Integration tests
          command: sbt it:test
          no_output_timeout: 30m

      - rasterframes/save-artifacts
      - rasterframes/save-cache

  it-no-gdal:
    executor: sbt/default
    steps:
      - checkout
      - sbt/setup
      - rasterframes/setup
      - rasterframes/restore-cache

      - run:
          name: Uninstall GDAL
          command: conda remove gdal -q -y --offline

      - sbt/compile

      - run:
          name: Integration tests
          command: sbt it:test
          no_output_timeout: 30m

      - rasterframes/save-artifacts
      - rasterframes/save-cache

workflows:
  version: 2
  all:
    jobs:
      - test

      - it:
          requires:
            - test
          filters:
            branches:
              only:
                - /feature\/.*-it.*/
                - /it\/.*/

      - it-no-gdal:
          requires:
            - test
          filters:
            branches:
              only:
                - /feature\/.*-it.*/
                - /it\/.*/

      - docs:
          filters:
            branches:
              only:
                - /feature\/.*docs.*/
                - /fix\/.*docs.*/
                - /docs\/.*/

  nightly:
    triggers:
      - schedule:
          cron: "0 8 * * *"
          filters:
            branches:
              only:
                - develop
    jobs:
      - test
      - it
      - it-no-gdal
      - docs
